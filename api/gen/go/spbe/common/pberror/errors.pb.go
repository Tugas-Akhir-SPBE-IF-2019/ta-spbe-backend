// Error message definition for gRPC based services.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: spbe/common/pberror/errors.proto

package pberror

import (
	loginfo "github.com/Tugas-Akhir-SPBE-IF-2019/ta-spbe-backend/api/gen/go/spbe/common/loginfo"
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorCode is a list of code that is returned on internal server related error.
type Server_ErrorCode int32

const (
	// UNKNOWN is when server unknown/unhandled error.
	Server_UNKNOWN Server_ErrorCode = 0
	// INTERNAL_FAILURE is when internal server error which is caused by unhandled exception or server panic.
	Server_INTERNAL_FAILURE Server_ErrorCode = 1
)

// Enum value maps for Server_ErrorCode.
var (
	Server_ErrorCode_name = map[int32]string{
		0: "UNKNOWN",
		1: "INTERNAL_FAILURE",
	}
	Server_ErrorCode_value = map[string]int32{
		"UNKNOWN":          0,
		"INTERNAL_FAILURE": 1,
	}
)

func (x Server_ErrorCode) Enum() *Server_ErrorCode {
	p := new(Server_ErrorCode)
	*p = x
	return p
}

func (x Server_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_spbe_common_pberror_errors_proto_enumTypes[0].Descriptor()
}

func (Server_ErrorCode) Type() protoreflect.EnumType {
	return &file_spbe_common_pberror_errors_proto_enumTypes[0]
}

func (x Server_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_ErrorCode.Descriptor instead.
func (Server_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{0, 0}
}

// ErrorCode is a list of code that is returned on unauthorized access error.
type Authorization_ErrorCode int32

const (
	// UNKNOWN is default code for stopped access for invalid authorization.
	// It will return 401 for HTTP.
	Authorization_UNKNOWN Authorization_ErrorCode = 0
	// INVALID_KEY is when user set authorization key but server failed to validate in general.
	// e.g., bad token parsing, invalid jwt token parse, invalid token, key not found, etc.
	// It will return 401 for HTTP.
	Authorization_INVALID_KEY Authorization_ErrorCode = 1
	// PERMISSION_DENIED is when user provide a valid authorization key,
	// but is not allowed to do the requested operation.
	// It will return 403 for HTTP.
	Authorization_PERMISSION_DENIED Authorization_ErrorCode = 2
)

// Enum value maps for Authorization_ErrorCode.
var (
	Authorization_ErrorCode_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_KEY",
		2: "PERMISSION_DENIED",
	}
	Authorization_ErrorCode_value = map[string]int32{
		"UNKNOWN":           0,
		"INVALID_KEY":       1,
		"PERMISSION_DENIED": 2,
	}
)

func (x Authorization_ErrorCode) Enum() *Authorization_ErrorCode {
	p := new(Authorization_ErrorCode)
	*p = x
	return p
}

func (x Authorization_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authorization_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_spbe_common_pberror_errors_proto_enumTypes[1].Descriptor()
}

func (Authorization_ErrorCode) Type() protoreflect.EnumType {
	return &file_spbe_common_pberror_errors_proto_enumTypes[1]
}

func (x Authorization_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authorization_ErrorCode.Descriptor instead.
func (Authorization_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{1, 0}
}

// ErrorCode is available error code for Validation error.
type Validation_ErrorCode int32

const (
	// UNKNOWN default unknown validation error.
	Validation_UNKNOWN Validation_ErrorCode = 0
	// REQUIRED field is required and cannot be empty.
	Validation_REQUIRED Validation_ErrorCode = 1
	// INVALID_FORMAT can be string pattern, bad uuid, etc.
	Validation_INVALID_FORMAT Validation_ErrorCode = 2
	// INVALID_TYPE is when field value type is unsupported, e.g., file upload mime type.
	Validation_INVALID_TYPE Validation_ErrorCode = 3
	// INVALID_DIMENSION is when field value dimension set is not in min/max allowed dimension range. e.g., image.
	Validation_INVALID_DIMENSION Validation_ErrorCode = 4
	// OUT_OF_RANGE is when (chars, list, numeric, size) field value is out of defined min/max allowed range.
	Validation_OUT_OF_RANGE Validation_ErrorCode = 5
	// TOO_SHORT is when (chars, list) field value length is shorter that minimum allowed.
	Validation_TOO_SHORT Validation_ErrorCode = 6
	// TOO_LONG is when (chars, list) field value length is longer that maximum allowed.
	Validation_TOO_LONG Validation_ErrorCode = 7
	// TOO_SMALL is when (numeric, size) field value less than minimum allowed.
	Validation_TOO_SMALL Validation_ErrorCode = 8
	// TOO_LARGE is when (numeric, size) larger than maximum allowed.
	Validation_TOO_LARGE Validation_ErrorCode = 9
	// NOT_IN_LIST is when given value is not in the defined list.
	Validation_NOT_IN_LIST Validation_ErrorCode = 10
	// DUPLICATED is when given value is not allowed to have duplication.
	Validation_DUPLICATED Validation_ErrorCode = 11
)

// Enum value maps for Validation_ErrorCode.
var (
	Validation_ErrorCode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "REQUIRED",
		2:  "INVALID_FORMAT",
		3:  "INVALID_TYPE",
		4:  "INVALID_DIMENSION",
		5:  "OUT_OF_RANGE",
		6:  "TOO_SHORT",
		7:  "TOO_LONG",
		8:  "TOO_SMALL",
		9:  "TOO_LARGE",
		10: "NOT_IN_LIST",
		11: "DUPLICATED",
	}
	Validation_ErrorCode_value = map[string]int32{
		"UNKNOWN":           0,
		"REQUIRED":          1,
		"INVALID_FORMAT":    2,
		"INVALID_TYPE":      3,
		"INVALID_DIMENSION": 4,
		"OUT_OF_RANGE":      5,
		"TOO_SHORT":         6,
		"TOO_LONG":          7,
		"TOO_SMALL":         8,
		"TOO_LARGE":         9,
		"NOT_IN_LIST":       10,
		"DUPLICATED":        11,
	}
)

func (x Validation_ErrorCode) Enum() *Validation_ErrorCode {
	p := new(Validation_ErrorCode)
	*p = x
	return p
}

func (x Validation_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Validation_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_spbe_common_pberror_errors_proto_enumTypes[2].Descriptor()
}

func (Validation_ErrorCode) Type() protoreflect.EnumType {
	return &file_spbe_common_pberror_errors_proto_enumTypes[2]
}

func (x Validation_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Validation_ErrorCode.Descriptor instead.
func (Validation_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{2, 0}
}

// ErrorCode is a list of code that is returned on internal server related error.
type Client_ErrorCode int32

const (
	// BAD_REQUEST is default error when server cannot parse given request from client.
	// It will return 400 for HTTP.
	Client_BAD_REQUEST Client_ErrorCode = 0
	// METHOD_NOT_ALLOWED is when path is match but HTTP method does not match.
	// It will return 403 for HTTP.
	Client_METHOD_NOT_ALLOWED Client_ErrorCode = 1
	// ROUTE_NOT_FOUND is when requested route not found. (grpc gateway routing)
	// It will return 404 for HTTP.
	Client_ROUTE_NOT_FOUND Client_ErrorCode = 2
	// DATA_NOT_FOUND is when requested data not found.
	// It will return 404 for HTTP.
	Client_DATA_NOT_FOUND Client_ErrorCode = 3
)

// Enum value maps for Client_ErrorCode.
var (
	Client_ErrorCode_name = map[int32]string{
		0: "BAD_REQUEST",
		1: "METHOD_NOT_ALLOWED",
		2: "ROUTE_NOT_FOUND",
		3: "DATA_NOT_FOUND",
	}
	Client_ErrorCode_value = map[string]int32{
		"BAD_REQUEST":        0,
		"METHOD_NOT_ALLOWED": 1,
		"ROUTE_NOT_FOUND":    2,
		"DATA_NOT_FOUND":     3,
	}
)

func (x Client_ErrorCode) Enum() *Client_ErrorCode {
	p := new(Client_ErrorCode)
	*p = x
	return p
}

func (x Client_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Client_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_spbe_common_pberror_errors_proto_enumTypes[3].Descriptor()
}

func (Client_ErrorCode) Type() protoreflect.EnumType {
	return &file_spbe_common_pberror_errors_proto_enumTypes[3]
}

func (x Client_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Client_ErrorCode.Descriptor instead.
func (Client_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{5, 0}
}

// Server is error message that is related to server unhandled error. It will return 500 for HTTP.
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// code is error code given by the server which can be used for caller to decide what is the next action.
	Code Server_ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=bfi.common.pberror.Server_ErrorCode" json:"code,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{0}
}

func (x *Server) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Server) GetCode() Server_ErrorCode {
	if x != nil {
		return x.Code
	}
	return Server_UNKNOWN
}

// Authorization is error message that is related to request authorization.
type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// code is error code given by the server which can be used for caller to decide what is the next action.
	Code Authorization_ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=bfi.common.pberror.Authorization_ErrorCode" json:"code,omitempty"`
	// sub_code is free enum string that is intended for specific action for API consumer.
	// sub_code should be documented in each implementor service proto definition.
	SubCode string `protobuf:"bytes,3,opt,name=sub_code,proto3" json:"sub_code,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{1}
}

func (x *Authorization) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Authorization) GetCode() Authorization_ErrorCode {
	if x != nil {
		return x.Code
	}
	return Authorization_UNKNOWN
}

func (x *Authorization) GetSubCode() string {
	if x != nil {
		return x.SubCode
	}
	return ""
}

// ValidationError is common validation error that is usually reflecting invalid input from the user.
// It will return 400 for HTTP.
type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// fields is list of Field which was failed the validation.
	Fields []*Validation_Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{2}
}

func (x *Validation) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Validation) GetFields() []*Validation_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// RateLimited is type of error to indicate that the request is stopped by the server. e.g., too many failed attempt.
// It will return 429 for HTTP.
type RateLimited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// retry_after caller can resend the request after this timestamp.
	RetryAfter *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=retry_after,proto3" json:"retry_after,omitempty"`
	// code is error code given by the server which can be used for caller to decide what is the next action.
	// code should be an enum of possible business error that is documented in each service proto file.
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RateLimited) Reset() {
	*x = RateLimited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimited) ProtoMessage() {}

func (x *RateLimited) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimited.ProtoReflect.Descriptor instead.
func (*RateLimited) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{3}
}

func (x *RateLimited) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *RateLimited) GetRetryAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.RetryAfter
	}
	return nil
}

func (x *RateLimited) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Business is type of error that can set custom `code` as specific to the service implementor.
// The custom code itself should be documented in each service.
// It will return 400 for HTTP.
type Business struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// code is error code given by the server which can be used for caller to decide what is the next action.
	// code should be an enum of possible business error that is documented in each service proto file.
	// the `code` itself should be prefixed with service id for better identification.
	// e.g., `BRAVO_FOO_CREDIT_OVER_LIMIT`
	// `BRAVO_FOO` is the service name
	// `CREDIT_OVER_LIMIT` is business specific error.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// info is the optional debugging info to help developer (API consumer).
	// The API consumer should identify the code to display appropriate message to the end user, not from this info as is.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Business) Reset() {
	*x = Business{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Business) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business) ProtoMessage() {}

func (x *Business) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business.ProtoReflect.Descriptor instead.
func (*Business) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{4}
}

func (x *Business) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Business) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Business) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// Client is generic error message for the client.
type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace is optional information for developers, it contains identifier on the request for error tracking.
	Trace *loginfo.Trace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// code is error code given by the server which can be used for caller to decide what is the next action.
	Code Client_ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=bfi.common.pberror.Client_ErrorCode" json:"code,omitempty"`
	// info is the optional debugging info to help developer (API consumer).
	// The API consumer should identify the code to display appropriate message to the end user, not from this info as is.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{5}
}

func (x *Client) GetTrace() *loginfo.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Client) GetCode() Client_ErrorCode {
	if x != nil {
		return x.Code
	}
	return Client_BAD_REQUEST
}

func (x *Client) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// Field is object to indicate which field has an error and optional info.
type Validation_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is error code given by the server which can be used for caller to decide what is the next action.
	Code Validation_ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=bfi.common.pberror.Validation_ErrorCode" json:"code,omitempty"`
	// field is the field which was failed the validation.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	// info is the optional debugging info to help developer (API consumer).
	// The API consumer should identify the code to display appropriate message to the end user.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Validation_Field) Reset() {
	*x = Validation_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_common_pberror_errors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation_Field) ProtoMessage() {}

func (x *Validation_Field) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_common_pberror_errors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation_Field.ProtoReflect.Descriptor instead.
func (*Validation_Field) Descriptor() ([]byte, []int) {
	return file_spbe_common_pberror_errors_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Validation_Field) GetCode() Validation_ErrorCode {
	if x != nil {
		return x.Code
	}
	return Validation_UNKNOWN
}

func (x *Validation_Field) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Validation_Field) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_spbe_common_pberror_errors_proto protoreflect.FileDescriptor

var file_spbe_common_pberror_errors_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x1f, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x3a, 0x03, 0xba, 0x47, 0x00,
	0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x40, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x02, 0x3a, 0x03, 0xba, 0x47, 0x00, 0x22, 0xca, 0x03, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x74, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62,
	0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x03, 0xba, 0x47, 0x00, 0x22, 0xd1, 0x01, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x3a,
	0x03, 0xba, 0x47, 0x00, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x03, 0xba, 0x47, 0x00, 0x22, 0x68, 0x0a, 0x08,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x3a, 0x03, 0xba, 0x47, 0x00, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x5d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x3a,
	0x03, 0xba, 0x47, 0x00, 0x42, 0x81, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x66, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x07, 0x50, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x75, 0x67, 0x61, 0x73, 0x2d, 0x41,
	0x6b, 0x68, 0x69, 0x72, 0x2d, 0x53, 0x50, 0x42, 0x45, 0x2d, 0x49, 0x46, 0x2d, 0x32, 0x30, 0x31,
	0x39, 0x2f, 0x74, 0x61, 0x2d, 0x73, 0x70, 0x62, 0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x62,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x3b, 0x70, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spbe_common_pberror_errors_proto_rawDescOnce sync.Once
	file_spbe_common_pberror_errors_proto_rawDescData = file_spbe_common_pberror_errors_proto_rawDesc
)

func file_spbe_common_pberror_errors_proto_rawDescGZIP() []byte {
	file_spbe_common_pberror_errors_proto_rawDescOnce.Do(func() {
		file_spbe_common_pberror_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_spbe_common_pberror_errors_proto_rawDescData)
	})
	return file_spbe_common_pberror_errors_proto_rawDescData
}

var file_spbe_common_pberror_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_spbe_common_pberror_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spbe_common_pberror_errors_proto_goTypes = []interface{}{
	(Server_ErrorCode)(0),         // 0: bfi.common.pberror.Server.ErrorCode
	(Authorization_ErrorCode)(0),  // 1: bfi.common.pberror.Authorization.ErrorCode
	(Validation_ErrorCode)(0),     // 2: bfi.common.pberror.Validation.ErrorCode
	(Client_ErrorCode)(0),         // 3: bfi.common.pberror.Client.ErrorCode
	(*Server)(nil),                // 4: bfi.common.pberror.Server
	(*Authorization)(nil),         // 5: bfi.common.pberror.Authorization
	(*Validation)(nil),            // 6: bfi.common.pberror.Validation
	(*RateLimited)(nil),           // 7: bfi.common.pberror.RateLimited
	(*Business)(nil),              // 8: bfi.common.pberror.Business
	(*Client)(nil),                // 9: bfi.common.pberror.Client
	(*Validation_Field)(nil),      // 10: bfi.common.pberror.Validation.Field
	(*loginfo.Trace)(nil),         // 11: bfi.common.loginfo.Trace
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_spbe_common_pberror_errors_proto_depIdxs = []int32{
	11, // 0: bfi.common.pberror.Server.trace:type_name -> bfi.common.loginfo.Trace
	0,  // 1: bfi.common.pberror.Server.code:type_name -> bfi.common.pberror.Server.ErrorCode
	11, // 2: bfi.common.pberror.Authorization.trace:type_name -> bfi.common.loginfo.Trace
	1,  // 3: bfi.common.pberror.Authorization.code:type_name -> bfi.common.pberror.Authorization.ErrorCode
	11, // 4: bfi.common.pberror.Validation.trace:type_name -> bfi.common.loginfo.Trace
	10, // 5: bfi.common.pberror.Validation.fields:type_name -> bfi.common.pberror.Validation.Field
	11, // 6: bfi.common.pberror.RateLimited.trace:type_name -> bfi.common.loginfo.Trace
	12, // 7: bfi.common.pberror.RateLimited.retry_after:type_name -> google.protobuf.Timestamp
	11, // 8: bfi.common.pberror.Business.trace:type_name -> bfi.common.loginfo.Trace
	11, // 9: bfi.common.pberror.Client.trace:type_name -> bfi.common.loginfo.Trace
	3,  // 10: bfi.common.pberror.Client.code:type_name -> bfi.common.pberror.Client.ErrorCode
	2,  // 11: bfi.common.pberror.Validation.Field.code:type_name -> bfi.common.pberror.Validation.ErrorCode
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_spbe_common_pberror_errors_proto_init() }
func file_spbe_common_pberror_errors_proto_init() {
	if File_spbe_common_pberror_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spbe_common_pberror_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Business); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_common_pberror_errors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spbe_common_pberror_errors_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spbe_common_pberror_errors_proto_goTypes,
		DependencyIndexes: file_spbe_common_pberror_errors_proto_depIdxs,
		EnumInfos:         file_spbe_common_pberror_errors_proto_enumTypes,
		MessageInfos:      file_spbe_common_pberror_errors_proto_msgTypes,
	}.Build()
	File_spbe_common_pberror_errors_proto = out.File
	file_spbe_common_pberror_errors_proto_rawDesc = nil
	file_spbe_common_pberror_errors_proto_goTypes = nil
	file_spbe_common_pberror_errors_proto_depIdxs = nil
}
