// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: spbe/service/zsample/foo.proto

package zsample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FooServiceClient is the client API for FooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooServiceClient interface {
	// Create a new foo and return newly created uuid.
	CreateFoo(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*CreateFooResult, error)
	// Update foo data identified by its `id`.
	UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*FooDataDetail, error)
	// Get list of foo data based on request parameter.
	GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*FooDataListPaginatedResponse, error)
	// Get single foo data by its identifier `id`.
	GetFooByID(ctx context.Context, in *GetFooByIDRequest, opts ...grpc.CallOption) (*FooDataDetail, error)
}

type fooServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooServiceClient(cc grpc.ClientConnInterface) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) CreateFoo(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*CreateFooResult, error) {
	out := new(CreateFooResult)
	err := c.cc.Invoke(ctx, "/bfi.bravoservice.zsample.FooService/CreateFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*FooDataDetail, error) {
	out := new(FooDataDetail)
	err := c.cc.Invoke(ctx, "/bfi.bravoservice.zsample.FooService/UpdateFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*FooDataListPaginatedResponse, error) {
	out := new(FooDataListPaginatedResponse)
	err := c.cc.Invoke(ctx, "/bfi.bravoservice.zsample.FooService/GetFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) GetFooByID(ctx context.Context, in *GetFooByIDRequest, opts ...grpc.CallOption) (*FooDataDetail, error) {
	out := new(FooDataDetail)
	err := c.cc.Invoke(ctx, "/bfi.bravoservice.zsample.FooService/GetFooByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooServiceServer is the server API for FooService service.
// All implementations must embed UnimplementedFooServiceServer
// for forward compatibility
type FooServiceServer interface {
	// Create a new foo and return newly created uuid.
	CreateFoo(context.Context, *CreateFooRequest) (*CreateFooResult, error)
	// Update foo data identified by its `id`.
	UpdateFoo(context.Context, *UpdateFooRequest) (*FooDataDetail, error)
	// Get list of foo data based on request parameter.
	GetFoo(context.Context, *GetFooRequest) (*FooDataListPaginatedResponse, error)
	// Get single foo data by its identifier `id`.
	GetFooByID(context.Context, *GetFooByIDRequest) (*FooDataDetail, error)
	mustEmbedUnimplementedFooServiceServer()
}

// UnimplementedFooServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooServiceServer struct {
}

func (UnimplementedFooServiceServer) CreateFoo(context.Context, *CreateFooRequest) (*CreateFooResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFoo not implemented")
}
func (UnimplementedFooServiceServer) UpdateFoo(context.Context, *UpdateFooRequest) (*FooDataDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoo not implemented")
}
func (UnimplementedFooServiceServer) GetFoo(context.Context, *GetFooRequest) (*FooDataListPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoo not implemented")
}
func (UnimplementedFooServiceServer) GetFooByID(context.Context, *GetFooByIDRequest) (*FooDataDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFooByID not implemented")
}
func (UnimplementedFooServiceServer) mustEmbedUnimplementedFooServiceServer() {}

// UnsafeFooServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServiceServer will
// result in compilation errors.
type UnsafeFooServiceServer interface {
	mustEmbedUnimplementedFooServiceServer()
}

func RegisterFooServiceServer(s grpc.ServiceRegistrar, srv FooServiceServer) {
	s.RegisterService(&FooService_ServiceDesc, srv)
}

func _FooService_CreateFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).CreateFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfi.bravoservice.zsample.FooService/CreateFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).CreateFoo(ctx, req.(*CreateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_UpdateFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).UpdateFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfi.bravoservice.zsample.FooService/UpdateFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).UpdateFoo(ctx, req.(*UpdateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_GetFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).GetFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfi.bravoservice.zsample.FooService/GetFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).GetFoo(ctx, req.(*GetFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_GetFooByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFooByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).GetFooByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfi.bravoservice.zsample.FooService/GetFooByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).GetFooByID(ctx, req.(*GetFooByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooService_ServiceDesc is the grpc.ServiceDesc for FooService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bfi.bravoservice.zsample.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFoo",
			Handler:    _FooService_CreateFoo_Handler,
		},
		{
			MethodName: "UpdateFoo",
			Handler:    _FooService_UpdateFoo_Handler,
		},
		{
			MethodName: "GetFoo",
			Handler:    _FooService_GetFoo_Handler,
		},
		{
			MethodName: "GetFooByID",
			Handler:    _FooService_GetFooByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spbe/service/zsample/foo.proto",
}
