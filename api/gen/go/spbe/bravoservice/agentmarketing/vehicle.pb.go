// Message definition for agent-marketing's vehicle service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: spbe/service/agentmarketing/vehicle.proto

package agentmarketing

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VehicleModel contains vehicle model info
type VehicleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vehicle model code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// vehicle model name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// vehicle model image location
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,proto3" json:"image_url,omitempty"`
	// vehicle category
	CategoryId string `protobuf:"bytes,4,opt,name=category_id,proto3" json:"category_id,omitempty"`
}

func (x *VehicleModel) Reset() {
	*x = VehicleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleModel) ProtoMessage() {}

func (x *VehicleModel) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleModel.ProtoReflect.Descriptor instead.
func (*VehicleModel) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{0}
}

func (x *VehicleModel) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VehicleModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VehicleModel) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *VehicleModel) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

// VehicleVariant contains vehicle variant info
type VehicleVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vehicle variant code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// vehicle variant name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// vehicle variant description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VehicleVariant) Reset() {
	*x = VehicleVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleVariant) ProtoMessage() {}

func (x *VehicleVariant) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleVariant.ProtoReflect.Descriptor instead.
func (*VehicleVariant) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{1}
}

func (x *VehicleVariant) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VehicleVariant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VehicleVariant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// VehicleModelVariant contains vehicle model with its variants information
type VehicleModelVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mark as popular vehicle model
	IsPopular bool `protobuf:"varint,1,opt,name=is_popular,proto3" json:"is_popular,omitempty"`
	// vehicle model info
	Model *VehicleModel `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// vehicle variants for current model
	Variants []*VehicleVariant `protobuf:"bytes,3,rep,name=variants,proto3" json:"variants,omitempty"`
	// supported years for the vehicle model
	Years []uint32 `protobuf:"varint,4,rep,packed,name=years,proto3" json:"years,omitempty"`
}

func (x *VehicleModelVariant) Reset() {
	*x = VehicleModelVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleModelVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleModelVariant) ProtoMessage() {}

func (x *VehicleModelVariant) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleModelVariant.ProtoReflect.Descriptor instead.
func (*VehicleModelVariant) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{2}
}

func (x *VehicleModelVariant) GetIsPopular() bool {
	if x != nil {
		return x.IsPopular
	}
	return false
}

func (x *VehicleModelVariant) GetModel() *VehicleModel {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *VehicleModelVariant) GetVariants() []*VehicleVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *VehicleModelVariant) GetYears() []uint32 {
	if x != nil {
		return x.Years
	}
	return nil
}

// GetAllVehicleModelsByBrandCodePaginatedRequest is the request message to get all vehicle model by brand code
type GetAllVehicleModelsByBrandCodePaginatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vehicle brand code
	BrandCode string `protobuf:"bytes,1,opt,name=brand_code,proto3" json:"brand_code,omitempty"`
	// Requested page. Default: 1
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Requested item per page. Default: 20
	PerPage int32 `protobuf:"varint,3,opt,name=per_page,proto3" json:"per_page,omitempty"`
	// a word to search vehicle models by parts of its brand code
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// asset_type_id can be CAR or MOTORCYCLE but default is: CAR
	AssetTypeId string `protobuf:"bytes,5,opt,name=asset_type_id,proto3" json:"asset_type_id,omitempty"`
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) Reset() {
	*x = GetAllVehicleModelsByBrandCodePaginatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVehicleModelsByBrandCodePaginatedRequest) ProtoMessage() {}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVehicleModelsByBrandCodePaginatedRequest.ProtoReflect.Descriptor instead.
func (*GetAllVehicleModelsByBrandCodePaginatedRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) GetBrandCode() string {
	if x != nil {
		return x.BrandCode
	}
	return ""
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetAllVehicleModelsByBrandCodePaginatedRequest) GetAssetTypeId() string {
	if x != nil {
		return x.AssetTypeId
	}
	return ""
}

// GetAllVehicleModelsByBrandCodePaginatedResponse is the response message for the client
type GetAllVehicleModelsByBrandCodePaginatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pagination info
	Pagination *PageBasePaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Contain list of vehicle models with its' variants data
	Data []*VehicleModelVariant `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllVehicleModelsByBrandCodePaginatedResponse) Reset() {
	*x = GetAllVehicleModelsByBrandCodePaginatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVehicleModelsByBrandCodePaginatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVehicleModelsByBrandCodePaginatedResponse) ProtoMessage() {}

func (x *GetAllVehicleModelsByBrandCodePaginatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVehicleModelsByBrandCodePaginatedResponse.ProtoReflect.Descriptor instead.
func (*GetAllVehicleModelsByBrandCodePaginatedResponse) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllVehicleModelsByBrandCodePaginatedResponse) GetPagination() *PageBasePaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllVehicleModelsByBrandCodePaginatedResponse) GetData() []*VehicleModelVariant {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetAllBrandPaginatedRequest is request message to get all vehicle brands
type GetAllBrandPaginatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested page. Default: 1
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Requested item per page. Default: 20
	PerPage int32 `protobuf:"varint,2,opt,name=per_page,proto3" json:"per_page,omitempty"`
	// a word to search vehicle brands by parts of its brand name
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// asset_type_id can be CAR or MOTORCYCLE but default is: CAR
	AssetTypeId string `protobuf:"bytes,4,opt,name=asset_type_id,proto3" json:"asset_type_id,omitempty"`
}

func (x *GetAllBrandPaginatedRequest) Reset() {
	*x = GetAllBrandPaginatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBrandPaginatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBrandPaginatedRequest) ProtoMessage() {}

func (x *GetAllBrandPaginatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBrandPaginatedRequest.ProtoReflect.Descriptor instead.
func (*GetAllBrandPaginatedRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllBrandPaginatedRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllBrandPaginatedRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetAllBrandPaginatedRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetAllBrandPaginatedRequest) GetAssetTypeId() string {
	if x != nil {
		return x.AssetTypeId
	}
	return ""
}

// VehicleBrand contains brand information
type VehicleBrand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the brand code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// the brand name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the brand image
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,proto3" json:"image_url,omitempty"`
}

func (x *VehicleBrand) Reset() {
	*x = VehicleBrand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleBrand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleBrand) ProtoMessage() {}

func (x *VehicleBrand) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleBrand.ProtoReflect.Descriptor instead.
func (*VehicleBrand) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{6}
}

func (x *VehicleBrand) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VehicleBrand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VehicleBrand) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// GetAllBrandPaginatedResponse is the response message for the client
type GetAllBrandPaginatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pagination info
	Pagination *PageBasePaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// List of vehicle brand data
	Data []*VehicleBrand `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllBrandPaginatedResponse) Reset() {
	*x = GetAllBrandPaginatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBrandPaginatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBrandPaginatedResponse) ProtoMessage() {}

func (x *GetAllBrandPaginatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_vehicle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBrandPaginatedResponse.ProtoReflect.Descriptor instead.
func (*GetAllBrandPaginatedResponse) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllBrandPaginatedResponse) GetPagination() *PageBasePaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllBrandPaginatedResponse) GetData() []*VehicleBrand {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_spbe_service_agentmarketing_vehicle_proto protoreflect.FileDescriptor

var file_spbe_service_agentmarketing_vehicle_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x62, 0x66, 0x69,
	0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x2a, 0x73, 0x70,
	0x62, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x0e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x12, 0x43, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72,
	0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0d, 0xba, 0x01, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d,
	0xba, 0x47, 0x1a, 0x3a, 0x05, 0x0a, 0x03, 0x12, 0x01, 0x31, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x9a, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xba, 0x47, 0x24, 0x3a, 0x06, 0x0a, 0x04, 0x12, 0x02,
	0x32, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x24, 0x40, 0x9a, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72,
	0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0x3a, 0x05, 0x0a, 0x03, 0x12, 0x01, 0x31, 0x69, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x9a, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xba, 0x47, 0x24, 0x3a, 0x06, 0x0a,
	0x04, 0x12, 0x02, 0x32, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x9a, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0c, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61,
	0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xf1, 0x03, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62,
	0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x62, 0x66, 0x69, 0x2e,
	0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0xba, 0x47, 0x2f, 0x2a, 0x2d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0xba, 0x47, 0x18, 0x2a, 0x16,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x42, 0xb0, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x15,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x75, 0x67, 0x61, 0x73, 0x2d, 0x41, 0x6b, 0x68, 0x69,
	0x72, 0x2d, 0x53, 0x50, 0x42, 0x45, 0x2d, 0x49, 0x46, 0x2d, 0x32, 0x30, 0x31, 0x39, 0x2f, 0x74,
	0x61, 0x2d, 0x73, 0x70, 0x62, 0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x62,
	0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spbe_service_agentmarketing_vehicle_proto_rawDescOnce sync.Once
	file_spbe_service_agentmarketing_vehicle_proto_rawDescData = file_spbe_service_agentmarketing_vehicle_proto_rawDesc
)

func file_spbe_service_agentmarketing_vehicle_proto_rawDescGZIP() []byte {
	file_spbe_service_agentmarketing_vehicle_proto_rawDescOnce.Do(func() {
		file_spbe_service_agentmarketing_vehicle_proto_rawDescData = protoimpl.X.CompressGZIP(file_spbe_service_agentmarketing_vehicle_proto_rawDescData)
	})
	return file_spbe_service_agentmarketing_vehicle_proto_rawDescData
}

var file_spbe_service_agentmarketing_vehicle_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spbe_service_agentmarketing_vehicle_proto_goTypes = []interface{}{
	(*VehicleModel)(nil),                                    // 0: bfi.bravoservice.agentmarketing.VehicleModel
	(*VehicleVariant)(nil),                                  // 1: bfi.bravoservice.agentmarketing.VehicleVariant
	(*VehicleModelVariant)(nil),                             // 2: bfi.bravoservice.agentmarketing.VehicleModelVariant
	(*GetAllVehicleModelsByBrandCodePaginatedRequest)(nil),  // 3: bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedRequest
	(*GetAllVehicleModelsByBrandCodePaginatedResponse)(nil), // 4: bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedResponse
	(*GetAllBrandPaginatedRequest)(nil),                     // 5: bfi.bravoservice.agentmarketing.GetAllBrandPaginatedRequest
	(*VehicleBrand)(nil),                                    // 6: bfi.bravoservice.agentmarketing.VehicleBrand
	(*GetAllBrandPaginatedResponse)(nil),                    // 7: bfi.bravoservice.agentmarketing.GetAllBrandPaginatedResponse
	(*PageBasePaginationResponse)(nil),                      // 8: bfi.bravoservice.agentmarketing.PageBasePaginationResponse
}
var file_spbe_service_agentmarketing_vehicle_proto_depIdxs = []int32{
	0, // 0: bfi.bravoservice.agentmarketing.VehicleModelVariant.model:type_name -> bfi.bravoservice.agentmarketing.VehicleModel
	1, // 1: bfi.bravoservice.agentmarketing.VehicleModelVariant.variants:type_name -> bfi.bravoservice.agentmarketing.VehicleVariant
	8, // 2: bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedResponse.pagination:type_name -> bfi.bravoservice.agentmarketing.PageBasePaginationResponse
	2, // 3: bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedResponse.data:type_name -> bfi.bravoservice.agentmarketing.VehicleModelVariant
	8, // 4: bfi.bravoservice.agentmarketing.GetAllBrandPaginatedResponse.pagination:type_name -> bfi.bravoservice.agentmarketing.PageBasePaginationResponse
	6, // 5: bfi.bravoservice.agentmarketing.GetAllBrandPaginatedResponse.data:type_name -> bfi.bravoservice.agentmarketing.VehicleBrand
	3, // 6: bfi.bravoservice.agentmarketing.VehicleService.GetAllVehicleModelsByBrandCode:input_type -> bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedRequest
	5, // 7: bfi.bravoservice.agentmarketing.VehicleService.GetAllBrand:input_type -> bfi.bravoservice.agentmarketing.GetAllBrandPaginatedRequest
	4, // 8: bfi.bravoservice.agentmarketing.VehicleService.GetAllVehicleModelsByBrandCode:output_type -> bfi.bravoservice.agentmarketing.GetAllVehicleModelsByBrandCodePaginatedResponse
	7, // 9: bfi.bravoservice.agentmarketing.VehicleService.GetAllBrand:output_type -> bfi.bravoservice.agentmarketing.GetAllBrandPaginatedResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_spbe_service_agentmarketing_vehicle_proto_init() }
func file_spbe_service_agentmarketing_vehicle_proto_init() {
	if File_spbe_service_agentmarketing_vehicle_proto != nil {
		return
	}
	file_spbe_service_agentmarketing_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleModelVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVehicleModelsByBrandCodePaginatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVehicleModelsByBrandCodePaginatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBrandPaginatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleBrand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_vehicle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBrandPaginatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spbe_service_agentmarketing_vehicle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spbe_service_agentmarketing_vehicle_proto_goTypes,
		DependencyIndexes: file_spbe_service_agentmarketing_vehicle_proto_depIdxs,
		MessageInfos:      file_spbe_service_agentmarketing_vehicle_proto_msgTypes,
	}.Build()
	File_spbe_service_agentmarketing_vehicle_proto = out.File
	file_spbe_service_agentmarketing_vehicle_proto_rawDesc = nil
	file_spbe_service_agentmarketing_vehicle_proto_goTypes = nil
	file_spbe_service_agentmarketing_vehicle_proto_depIdxs = nil
}
