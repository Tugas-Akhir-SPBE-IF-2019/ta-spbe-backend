// Message definition for agent-marketing's calculation service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: spbe/service/agentmarketing/calculation.proto

package agentmarketing

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CalculationInfoRequest contains calculation input that is being passed to CalculateCollateralRequest
type CalculationInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// package id that is being selected by the user
	PackageId uint32 `protobuf:"varint,1,opt,name=package_id,proto3" json:"package_id,omitempty"`
	// product id that is being selected by the user
	ProductId uint32 `protobuf:"varint,2,opt,name=product_id,proto3" json:"product_id,omitempty"`
	// applicant's domicile city code
	CityCode string `protobuf:"bytes,3,opt,name=city_code,proto3" json:"city_code,omitempty"`
	// applicant's domicile sub district code
	SubDistrictCode string `protobuf:"bytes,4,opt,name=sub_district_code,proto3" json:"sub_district_code,omitempty"`
	// applicant's customer type
	CustomerType string `protobuf:"bytes,5,opt,name=customer_type,proto3" json:"customer_type,omitempty"`
}

func (x *CalculationInfoRequest) Reset() {
	*x = CalculationInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculationInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculationInfoRequest) ProtoMessage() {}

func (x *CalculationInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculationInfoRequest.ProtoReflect.Descriptor instead.
func (*CalculationInfoRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{0}
}

func (x *CalculationInfoRequest) GetPackageId() uint32 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *CalculationInfoRequest) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *CalculationInfoRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *CalculationInfoRequest) GetSubDistrictCode() string {
	if x != nil {
		return x.SubDistrictCode
	}
	return ""
}

func (x *CalculationInfoRequest) GetCustomerType() string {
	if x != nil {
		return x.CustomerType
	}
	return ""
}

// CollateralInfoRequest contains collateral info that is being passed to CalculateCollateralRequest
type CollateralInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collateral asset code
	AssetCode string `protobuf:"bytes,1,opt,name=asset_code,proto3" json:"asset_code,omitempty"`
	// collateral asset manufacturing year
	ManufacturingYear uint32 `protobuf:"varint,2,opt,name=manufacturing_year,proto3" json:"manufacturing_year,omitempty"`
	// collateral asset category id
	CategoryId string `protobuf:"bytes,3,opt,name=category_id,proto3" json:"category_id,omitempty"`
	// collateral asset newness
	IsNew bool `protobuf:"varint,4,opt,name=is_new,proto3" json:"is_new,omitempty"`
	// collateral asset type id
	AssetTypeId string `protobuf:"bytes,5,opt,name=asset_type_id,proto3" json:"asset_type_id,omitempty"`
}

func (x *CollateralInfoRequest) Reset() {
	*x = CollateralInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateralInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateralInfoRequest) ProtoMessage() {}

func (x *CollateralInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateralInfoRequest.ProtoReflect.Descriptor instead.
func (*CollateralInfoRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{1}
}

func (x *CollateralInfoRequest) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *CollateralInfoRequest) GetManufacturingYear() uint32 {
	if x != nil {
		return x.ManufacturingYear
	}
	return 0
}

func (x *CollateralInfoRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CollateralInfoRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CollateralInfoRequest) GetAssetTypeId() string {
	if x != nil {
		return x.AssetTypeId
	}
	return ""
}

// CalculateCollateralRequest is the request to calculate collateral
type CalculateCollateralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculation input
	Calculation *CalculationInfoRequest `protobuf:"bytes,1,opt,name=calculation,proto3" json:"calculation,omitempty"`
	// collateral asset info
	Collateral *CollateralInfoRequest `protobuf:"bytes,2,opt,name=collateral,proto3" json:"collateral,omitempty"`
}

func (x *CalculateCollateralRequest) Reset() {
	*x = CalculateCollateralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCollateralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCollateralRequest) ProtoMessage() {}

func (x *CalculateCollateralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCollateralRequest.ProtoReflect.Descriptor instead.
func (*CalculateCollateralRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{2}
}

func (x *CalculateCollateralRequest) GetCalculation() *CalculationInfoRequest {
	if x != nil {
		return x.Calculation
	}
	return nil
}

func (x *CalculateCollateralRequest) GetCollateral() *CollateralInfoRequest {
	if x != nil {
		return x.Collateral
	}
	return nil
}

// CalculateCollateralResponse is the response message to the client
type CalculateCollateralResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated ntf_amount
	NtfAmount float64 `protobuf:"fixed64,1,opt,name=ntf_amount,proto3" json:"ntf_amount,omitempty"`
	// calculated max_ltv
	MaxLtv float64 `protobuf:"fixed64,2,opt,name=max_ltv,proto3" json:"max_ltv,omitempty"`
	// collateral asset_price based on inputs
	AssetPrice float64 `protobuf:"fixed64,3,opt,name=asset_price,proto3" json:"asset_price,omitempty"`
}

func (x *CalculateCollateralResponse) Reset() {
	*x = CalculateCollateralResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCollateralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCollateralResponse) ProtoMessage() {}

func (x *CalculateCollateralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCollateralResponse.ProtoReflect.Descriptor instead.
func (*CalculateCollateralResponse) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{3}
}

func (x *CalculateCollateralResponse) GetNtfAmount() float64 {
	if x != nil {
		return x.NtfAmount
	}
	return 0
}

func (x *CalculateCollateralResponse) GetMaxLtv() float64 {
	if x != nil {
		return x.MaxLtv
	}
	return 0
}

func (x *CalculateCollateralResponse) GetAssetPrice() float64 {
	if x != nil {
		return x.AssetPrice
	}
	return 0
}

// InstallmentCalculationInfoRequest contains calculation info that is being passed to CalculateInstallmentRequest
type InstallmentCalculationInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// loan amount that is being sent by the user
	LoanAmount float64 `protobuf:"fixed64,1,opt,name=loan_amount,proto3" json:"loan_amount,omitempty"`
	// product id that is being selected by the user
	ProductId uint32 `protobuf:"varint,2,opt,name=product_id,proto3" json:"product_id,omitempty"`
	// package id that is being selected by the user
	PackageId uint32 `protobuf:"varint,3,opt,name=package_id,proto3" json:"package_id,omitempty"`
	// applicant's customer type
	CustomerType string `protobuf:"bytes,4,opt,name=customer_type,proto3" json:"customer_type,omitempty"`
	// applicant's domicile city code
	CityCode string `protobuf:"bytes,5,opt,name=city_code,proto3" json:"city_code,omitempty"`
	// applicant's domicile sub district code
	SubDistrictCode string `protobuf:"bytes,6,opt,name=sub_district_code,proto3" json:"sub_district_code,omitempty"`
}

func (x *InstallmentCalculationInfoRequest) Reset() {
	*x = InstallmentCalculationInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentCalculationInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentCalculationInfoRequest) ProtoMessage() {}

func (x *InstallmentCalculationInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentCalculationInfoRequest.ProtoReflect.Descriptor instead.
func (*InstallmentCalculationInfoRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{4}
}

func (x *InstallmentCalculationInfoRequest) GetLoanAmount() float64 {
	if x != nil {
		return x.LoanAmount
	}
	return 0
}

func (x *InstallmentCalculationInfoRequest) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *InstallmentCalculationInfoRequest) GetPackageId() uint32 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *InstallmentCalculationInfoRequest) GetCustomerType() string {
	if x != nil {
		return x.CustomerType
	}
	return ""
}

func (x *InstallmentCalculationInfoRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *InstallmentCalculationInfoRequest) GetSubDistrictCode() string {
	if x != nil {
		return x.SubDistrictCode
	}
	return ""
}

// InstallmentCollateralInfoRequest contains collateral info that is being passed to CalculateInstallmentRequest
type InstallmentCollateralInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collateral asset code
	AssetCode string `protobuf:"bytes,1,opt,name=asset_code,proto3" json:"asset_code,omitempty"`
	// collateral asset manufacturing year
	ManufacturingYear uint32 `protobuf:"varint,2,opt,name=manufacturing_year,proto3" json:"manufacturing_year,omitempty"`
	// collateral asset category id
	CategoryId string `protobuf:"bytes,3,opt,name=category_id,proto3" json:"category_id,omitempty"`
	// collateral asset newness
	IsNew bool `protobuf:"varint,4,opt,name=is_new,proto3" json:"is_new,omitempty"`
	// collateral asset type id
	AssetTypeId string `protobuf:"bytes,5,opt,name=asset_type_id,proto3" json:"asset_type_id,omitempty"`
	// collateral otr value
	Otr float64 `protobuf:"fixed64,6,opt,name=otr,proto3" json:"otr,omitempty"`
}

func (x *InstallmentCollateralInfoRequest) Reset() {
	*x = InstallmentCollateralInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentCollateralInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentCollateralInfoRequest) ProtoMessage() {}

func (x *InstallmentCollateralInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentCollateralInfoRequest.ProtoReflect.Descriptor instead.
func (*InstallmentCollateralInfoRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{5}
}

func (x *InstallmentCollateralInfoRequest) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *InstallmentCollateralInfoRequest) GetManufacturingYear() uint32 {
	if x != nil {
		return x.ManufacturingYear
	}
	return 0
}

func (x *InstallmentCollateralInfoRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *InstallmentCollateralInfoRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *InstallmentCollateralInfoRequest) GetAssetTypeId() string {
	if x != nil {
		return x.AssetTypeId
	}
	return ""
}

func (x *InstallmentCollateralInfoRequest) GetOtr() float64 {
	if x != nil {
		return x.Otr
	}
	return 0
}

// CalculateInstallmentRequest is the request to calculate installments
type CalculateInstallmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// installment calculation input
	Calculation *InstallmentCalculationInfoRequest `protobuf:"bytes,1,opt,name=calculation,proto3" json:"calculation,omitempty"`
	// installment collateral asset info
	Collateral *InstallmentCollateralInfoRequest `protobuf:"bytes,2,opt,name=collateral,proto3" json:"collateral,omitempty"`
	// is installment over 50 years
	Over_50Years bool `protobuf:"varint,3,opt,name=over_50_years,proto3" json:"over_50_years,omitempty"`
	// insurance coverage type
	InsuranceCoverageType string `protobuf:"bytes,4,opt,name=insurance_coverage_type,proto3" json:"insurance_coverage_type,omitempty"`
}

func (x *CalculateInstallmentRequest) Reset() {
	*x = CalculateInstallmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateInstallmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateInstallmentRequest) ProtoMessage() {}

func (x *CalculateInstallmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateInstallmentRequest.ProtoReflect.Descriptor instead.
func (*CalculateInstallmentRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{6}
}

func (x *CalculateInstallmentRequest) GetCalculation() *InstallmentCalculationInfoRequest {
	if x != nil {
		return x.Calculation
	}
	return nil
}

func (x *CalculateInstallmentRequest) GetCollateral() *InstallmentCollateralInfoRequest {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *CalculateInstallmentRequest) GetOver_50Years() bool {
	if x != nil {
		return x.Over_50Years
	}
	return false
}

func (x *CalculateInstallmentRequest) GetInsuranceCoverageType() string {
	if x != nil {
		return x.InsuranceCoverageType
	}
	return ""
}

// InstallmentProvisionInfo contains provision info that is being passed to CalculateInstallmentResponse
type InstallmentProvisionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated rate
	Rate float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	// calculated fee
	Fee float64 `protobuf:"fixed64,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *InstallmentProvisionInfo) Reset() {
	*x = InstallmentProvisionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentProvisionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentProvisionInfo) ProtoMessage() {}

func (x *InstallmentProvisionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentProvisionInfo.ProtoReflect.Descriptor instead.
func (*InstallmentProvisionInfo) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{7}
}

func (x *InstallmentProvisionInfo) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *InstallmentProvisionInfo) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

// InstallmentAssetInsuranceInfo contains asset insurance info that is being passed to CalculateInstallmentResponse
type InstallmentAssetInsuranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated premium amount
	Premium float64 `protobuf:"fixed64,1,opt,name=premium,proto3" json:"premium,omitempty"`
	// calculation id
	CalculationId string `protobuf:"bytes,2,opt,name=calculation_id,proto3" json:"calculation_id,omitempty"`
}

func (x *InstallmentAssetInsuranceInfo) Reset() {
	*x = InstallmentAssetInsuranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentAssetInsuranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentAssetInsuranceInfo) ProtoMessage() {}

func (x *InstallmentAssetInsuranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentAssetInsuranceInfo.ProtoReflect.Descriptor instead.
func (*InstallmentAssetInsuranceInfo) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{8}
}

func (x *InstallmentAssetInsuranceInfo) GetPremium() float64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

func (x *InstallmentAssetInsuranceInfo) GetCalculationId() string {
	if x != nil {
		return x.CalculationId
	}
	return ""
}

// InstallmentLifeInsuranceInfo contains life insurance info that is being passed to CalculateInstallmentResponse
type InstallmentLifeInsuranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated premium amount
	Premium float64 `protobuf:"fixed64,1,opt,name=premium,proto3" json:"premium,omitempty"`
	// calculation id
	CalculationId string `protobuf:"bytes,2,opt,name=calculation_id,proto3" json:"calculation_id,omitempty"`
}

func (x *InstallmentLifeInsuranceInfo) Reset() {
	*x = InstallmentLifeInsuranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentLifeInsuranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentLifeInsuranceInfo) ProtoMessage() {}

func (x *InstallmentLifeInsuranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentLifeInsuranceInfo.ProtoReflect.Descriptor instead.
func (*InstallmentLifeInsuranceInfo) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{9}
}

func (x *InstallmentLifeInsuranceInfo) GetPremium() float64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

func (x *InstallmentLifeInsuranceInfo) GetCalculationId() string {
	if x != nil {
		return x.CalculationId
	}
	return ""
}

// InstallmentRsaInsuranceInfo contains rsa insurance info that is being passed to CalculateInstallmentResponse
type InstallmentRsaInsuranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated premium amount
	Premium float64 `protobuf:"fixed64,1,opt,name=premium,proto3" json:"premium,omitempty"`
	// calculation id
	CalculationId string `protobuf:"bytes,2,opt,name=calculation_id,proto3" json:"calculation_id,omitempty"`
}

func (x *InstallmentRsaInsuranceInfo) Reset() {
	*x = InstallmentRsaInsuranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentRsaInsuranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentRsaInsuranceInfo) ProtoMessage() {}

func (x *InstallmentRsaInsuranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentRsaInsuranceInfo.ProtoReflect.Descriptor instead.
func (*InstallmentRsaInsuranceInfo) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{10}
}

func (x *InstallmentRsaInsuranceInfo) GetPremium() float64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

func (x *InstallmentRsaInsuranceInfo) GetCalculationId() string {
	if x != nil {
		return x.CalculationId
	}
	return ""
}

// InstallmentSantunanInsurance contains santunan insurance info that is being passed to CalculateInstallmentResponse
type InstallmentSantunanInsuranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated premium amount
	Premium float64 `protobuf:"fixed64,1,opt,name=premium,proto3" json:"premium,omitempty"`
	// calculation id
	CalculationId string `protobuf:"bytes,2,opt,name=calculation_id,proto3" json:"calculation_id,omitempty"`
}

func (x *InstallmentSantunanInsuranceInfo) Reset() {
	*x = InstallmentSantunanInsuranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentSantunanInsuranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentSantunanInsuranceInfo) ProtoMessage() {}

func (x *InstallmentSantunanInsuranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentSantunanInsuranceInfo.ProtoReflect.Descriptor instead.
func (*InstallmentSantunanInsuranceInfo) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{11}
}

func (x *InstallmentSantunanInsuranceInfo) GetPremium() float64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

func (x *InstallmentSantunanInsuranceInfo) GetCalculationId() string {
	if x != nil {
		return x.CalculationId
	}
	return ""
}

// CalculateInstallmentResponseItem is the response object for the individual data
type CalculateInstallmentResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// calculated tenor
	Tenor float64 `protobuf:"fixed64,1,opt,name=tenor,proto3" json:"tenor,omitempty"`
	// calculated rounded up installment
	RoundedUpInstallment float64 `protobuf:"fixed64,2,opt,name=rounded_up_installment,proto3" json:"rounded_up_installment,omitempty"`
	// calculated capitalized ntf amount
	CapitalizedNtfAmount float64 `protobuf:"fixed64,3,opt,name=capitalized_ntf_amount,proto3" json:"capitalized_ntf_amount,omitempty"`
	// calculated admin fee
	AdminFee float64 `protobuf:"fixed64,4,opt,name=admin_fee,proto3" json:"admin_fee,omitempty"`
	// calculated provision
	Provision *InstallmentProvisionInfo `protobuf:"bytes,5,opt,name=provision,proto3" json:"provision,omitempty"`
	// calculated asset insurance
	AssetInsurance *InstallmentAssetInsuranceInfo `protobuf:"bytes,6,opt,name=asset_insurance,proto3" json:"asset_insurance,omitempty"`
	// calculated life insurance
	LifeInsurance *InstallmentLifeInsuranceInfo `protobuf:"bytes,7,opt,name=life_insurance,proto3" json:"life_insurance,omitempty"`
	// calculated ntf amount
	NtfAmount float64 `protobuf:"fixed64,8,opt,name=ntf_amount,proto3" json:"ntf_amount,omitempty"`
	// calculated effective rate
	EffectiveRate float64 `protobuf:"fixed64,9,opt,name=effective_rate,proto3" json:"effective_rate,omitempty"`
	// calculated fiducia fee
	FiduciaFee float64 `protobuf:"fixed64,10,opt,name=fiducia_fee,proto3" json:"fiducia_fee,omitempty"`
	// calculated ntf amount
	OtherFee float64 `protobuf:"fixed64,11,opt,name=other_fee,proto3" json:"other_fee,omitempty"`
	// calculated rsa insurance
	RsaInsurance *InstallmentRsaInsuranceInfo `protobuf:"bytes,12,opt,name=rsa_insurance,proto3" json:"rsa_insurance,omitempty"`
	// calculated santunan insurance
	SantunanInsurance *InstallmentSantunanInsuranceInfo `protobuf:"bytes,13,opt,name=santunan_insurance,proto3" json:"santunan_insurance,omitempty"`
}

func (x *CalculateInstallmentResponseItem) Reset() {
	*x = CalculateInstallmentResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateInstallmentResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateInstallmentResponseItem) ProtoMessage() {}

func (x *CalculateInstallmentResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateInstallmentResponseItem.ProtoReflect.Descriptor instead.
func (*CalculateInstallmentResponseItem) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{12}
}

func (x *CalculateInstallmentResponseItem) GetTenor() float64 {
	if x != nil {
		return x.Tenor
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetRoundedUpInstallment() float64 {
	if x != nil {
		return x.RoundedUpInstallment
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetCapitalizedNtfAmount() float64 {
	if x != nil {
		return x.CapitalizedNtfAmount
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetAdminFee() float64 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetProvision() *InstallmentProvisionInfo {
	if x != nil {
		return x.Provision
	}
	return nil
}

func (x *CalculateInstallmentResponseItem) GetAssetInsurance() *InstallmentAssetInsuranceInfo {
	if x != nil {
		return x.AssetInsurance
	}
	return nil
}

func (x *CalculateInstallmentResponseItem) GetLifeInsurance() *InstallmentLifeInsuranceInfo {
	if x != nil {
		return x.LifeInsurance
	}
	return nil
}

func (x *CalculateInstallmentResponseItem) GetNtfAmount() float64 {
	if x != nil {
		return x.NtfAmount
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetEffectiveRate() float64 {
	if x != nil {
		return x.EffectiveRate
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetFiduciaFee() float64 {
	if x != nil {
		return x.FiduciaFee
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetOtherFee() float64 {
	if x != nil {
		return x.OtherFee
	}
	return 0
}

func (x *CalculateInstallmentResponseItem) GetRsaInsurance() *InstallmentRsaInsuranceInfo {
	if x != nil {
		return x.RsaInsurance
	}
	return nil
}

func (x *CalculateInstallmentResponseItem) GetSantunanInsurance() *InstallmentSantunanInsuranceInfo {
	if x != nil {
		return x.SantunanInsurance
	}
	return nil
}

// CalculateInstallmentResponse is the response message to the client
type CalculateInstallmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction id for the calculation
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,proto3" json:"transaction_id,omitempty"`
	// data item for the calculate installment response
	Data []*CalculateInstallmentResponseItem `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CalculateInstallmentResponse) Reset() {
	*x = CalculateInstallmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateInstallmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateInstallmentResponse) ProtoMessage() {}

func (x *CalculateInstallmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_agentmarketing_calculation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateInstallmentResponse.ProtoReflect.Descriptor instead.
func (*CalculateInstallmentResponse) Descriptor() ([]byte, []int) {
	return file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP(), []int{13}
}

func (x *CalculateInstallmentResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CalculateInstallmentResponse) GetData() []*CalculateInstallmentResponseItem {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_spbe_service_agentmarketing_calculation_proto protoreflect.FileDescriptor

var file_spbe_service_agentmarketing_calculation_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x02, 0x0a,
	0x16, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xe0, 0x41, 0x02,
	0xba, 0x47, 0x12, 0x3a, 0x03, 0x12, 0x01, 0x35, 0xba, 0x01, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x12, 0x3a, 0x03, 0x12,
	0x01, 0x31, 0xba, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xba, 0x47, 0x0e, 0x3a, 0x07, 0x12, 0x05, 0x31, 0x32, 0x2e, 0x37, 0x31, 0x78, 0x40, 0x80, 0x01,
	0x01, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0x3a, 0x0f, 0x12, 0x0d,
	0x31, 0x32, 0x2e, 0x37, 0x31, 0x2e, 0x30, 0x35, 0x2e, 0x31, 0x30, 0x30, 0x32, 0x78, 0x40, 0x80,
	0x01, 0x01, 0x52, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41,
	0x02, 0xba, 0x47, 0x24, 0x3a, 0x05, 0x12, 0x03, 0x4e, 0x45, 0x57, 0x78, 0x40, 0x80, 0x01, 0x01,
	0xba, 0x01, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0xc2, 0x01, 0x05, 0x12, 0x03, 0x4e, 0x45, 0x57, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x27, 0x3a, 0x13, 0x12,
	0x11, 0x54, 0x4f, 0x59, 0x4f, 0x54, 0x41, 0x2e, 0x52, 0x55, 0x53, 0x48, 0x2e, 0x47, 0x31, 0x35,
	0x41, 0x54, 0x78, 0x40, 0x80, 0x01, 0x01, 0xba, 0x01, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0xe0, 0x41,
	0x02, 0xba, 0x47, 0x1d, 0x3a, 0x06, 0x12, 0x04, 0x32, 0x30, 0x31, 0x34, 0xba, 0x01, 0x12, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x47, 0x0d, 0x3a,
	0x06, 0x12, 0x04, 0x4a, 0x45, 0x45, 0x50, 0x78, 0x40, 0x80, 0x01, 0x01, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xe0, 0x41, 0x02, 0xba, 0x47,
	0x12, 0x3a, 0x07, 0x12, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xba, 0x01, 0x06, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x52, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xba, 0x47, 0x23, 0x3a, 0x05, 0x12, 0x03, 0x43, 0x41, 0x52, 0x78, 0x40,
	0x80, 0x01, 0x01, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x43, 0x41, 0x52, 0xc2, 0x01, 0x0c, 0x12, 0x0a,
	0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x14, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0e, 0xba, 0x01,
	0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x13, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0d, 0xba, 0x01, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x74, 0x66, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x74, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x74, 0x76, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xa4, 0x03, 0x0a, 0x21, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1d, 0xe0, 0x41,
	0x02, 0xba, 0x47, 0x17, 0x3a, 0x07, 0x12, 0x05, 0x31, 0x32, 0x33, 0x34, 0x35, 0xba, 0x01, 0x0b,
	0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x61,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xe0, 0x41,
	0x02, 0xba, 0x47, 0x12, 0x3a, 0x03, 0x12, 0x01, 0x31, 0xba, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x12, 0x3a, 0x03,
	0x12, 0x01, 0x35, 0xba, 0x01, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x24, 0x3a, 0x05, 0x12, 0x03, 0x4e,
	0x45, 0x57, 0x78, 0x40, 0x80, 0x01, 0x01, 0xba, 0x01, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x4e, 0x45, 0x57, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xba, 0x47, 0x0e, 0x3a, 0x07, 0x12, 0x05, 0x31, 0x32, 0x2e, 0x37, 0x31, 0x78,
	0x40, 0x80, 0x01, 0x01, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0x3a,
	0x0f, 0x12, 0x0d, 0x31, 0x32, 0x2e, 0x37, 0x31, 0x2e, 0x30, 0x35, 0x2e, 0x31, 0x30, 0x30, 0x32,
	0x78, 0x40, 0x80, 0x01, 0x01, 0x52, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x20, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x27, 0x3a, 0x13, 0x12, 0x11, 0x54, 0x4f, 0x59,
	0x4f, 0x54, 0x41, 0x2e, 0x52, 0x55, 0x53, 0x48, 0x2e, 0x47, 0x31, 0x35, 0x41, 0x54, 0x78, 0x40,
	0x80, 0x01, 0x01, 0xba, 0x01, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x12,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x1d,
	0x3a, 0x06, 0x12, 0x04, 0x32, 0x30, 0x31, 0x34, 0xba, 0x01, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x52, 0x12, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x47, 0x0d, 0x3a, 0x06, 0x12, 0x04, 0x4a,
	0x45, 0x45, 0x50, 0x78, 0x40, 0x80, 0x01, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x12, 0x3a, 0x07, 0x12,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xba, 0x01, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x52,
	0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xba, 0x47, 0x23, 0x3a, 0x05, 0x12, 0x03, 0x43, 0x41, 0x52, 0x78, 0x40, 0x80, 0x01, 0x01, 0xc2,
	0x01, 0x05, 0x12, 0x03, 0x43, 0x41, 0x52, 0xc2, 0x01, 0x0c, 0x12, 0x0a, 0x4d, 0x4f, 0x54, 0x4f,
	0x52, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x14, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0e, 0x3a, 0x06, 0x12, 0x04, 0x31, 0x32,
	0x33, 0x34, 0xba, 0x01, 0x03, 0x6f, 0x74, 0x72, 0x52, 0x03, 0x6f, 0x74, 0x72, 0x22, 0xbb, 0x03,
	0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a,
	0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x14, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0e, 0xba, 0x01,
	0x0b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x13, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x0d, 0xba, 0x01, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x45, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x35, 0x30, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x19,
	0x3a, 0x07, 0x12, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xba, 0x01, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x35, 0x30, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x35, 0x30, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x47, 0x24, 0x3a, 0x05,
	0x12, 0x03, 0x54, 0x4c, 0x4f, 0x78, 0x40, 0x80, 0x01, 0x01, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x54,
	0x4c, 0x4f, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x41, 0x52, 0x4b, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x4d,
	0x49, 0x58, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x61, 0x0a,
	0x1d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0x60, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x66, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0x5f, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x73, 0x61, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6e, 0x74, 0x75, 0x6e, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xcf, 0x06, 0x0a, 0x20, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74,
	0x65, 0x6e, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x66, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69,
	0x66, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x74, 0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x64, 0x75, 0x63,
	0x69, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x72, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x66,
	0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x61, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x73, 0x61, 0x5f, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x73, 0x61, 0x6e, 0x74,
	0x75, 0x6e, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6e, 0x74, 0x75, 0x6e, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x73, 0x61, 0x6e, 0x74, 0x75, 0x6e, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1c,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xd2, 0x03, 0x0a, 0x12,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3b, 0x2e, 0x62, 0x66, 0x69,
	0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72,
	0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x22, 0x2a, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0xdf,
	0x01, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72,
	0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0xba, 0x47, 0x24, 0x2a, 0x22, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x6c,
	0x42, 0x9f, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61,
	0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x66, 0x69, 0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x62, 0x66, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x66, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spbe_service_agentmarketing_calculation_proto_rawDescOnce sync.Once
	file_spbe_service_agentmarketing_calculation_proto_rawDescData = file_spbe_service_agentmarketing_calculation_proto_rawDesc
)

func file_spbe_service_agentmarketing_calculation_proto_rawDescGZIP() []byte {
	file_spbe_service_agentmarketing_calculation_proto_rawDescOnce.Do(func() {
		file_spbe_service_agentmarketing_calculation_proto_rawDescData = protoimpl.X.CompressGZIP(file_spbe_service_agentmarketing_calculation_proto_rawDescData)
	})
	return file_spbe_service_agentmarketing_calculation_proto_rawDescData
}

var file_spbe_service_agentmarketing_calculation_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_spbe_service_agentmarketing_calculation_proto_goTypes = []interface{}{
	(*CalculationInfoRequest)(nil),            // 0: bfi.bravoservice.agentmarketing.CalculationInfoRequest
	(*CollateralInfoRequest)(nil),             // 1: bfi.bravoservice.agentmarketing.CollateralInfoRequest
	(*CalculateCollateralRequest)(nil),        // 2: bfi.bravoservice.agentmarketing.CalculateCollateralRequest
	(*CalculateCollateralResponse)(nil),       // 3: bfi.bravoservice.agentmarketing.CalculateCollateralResponse
	(*InstallmentCalculationInfoRequest)(nil), // 4: bfi.bravoservice.agentmarketing.InstallmentCalculationInfoRequest
	(*InstallmentCollateralInfoRequest)(nil),  // 5: bfi.bravoservice.agentmarketing.InstallmentCollateralInfoRequest
	(*CalculateInstallmentRequest)(nil),       // 6: bfi.bravoservice.agentmarketing.CalculateInstallmentRequest
	(*InstallmentProvisionInfo)(nil),          // 7: bfi.bravoservice.agentmarketing.InstallmentProvisionInfo
	(*InstallmentAssetInsuranceInfo)(nil),     // 8: bfi.bravoservice.agentmarketing.InstallmentAssetInsuranceInfo
	(*InstallmentLifeInsuranceInfo)(nil),      // 9: bfi.bravoservice.agentmarketing.InstallmentLifeInsuranceInfo
	(*InstallmentRsaInsuranceInfo)(nil),       // 10: bfi.bravoservice.agentmarketing.InstallmentRsaInsuranceInfo
	(*InstallmentSantunanInsuranceInfo)(nil),  // 11: bfi.bravoservice.agentmarketing.InstallmentSantunanInsuranceInfo
	(*CalculateInstallmentResponseItem)(nil),  // 12: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem
	(*CalculateInstallmentResponse)(nil),      // 13: bfi.bravoservice.agentmarketing.CalculateInstallmentResponse
}
var file_spbe_service_agentmarketing_calculation_proto_depIdxs = []int32{
	0,  // 0: bfi.bravoservice.agentmarketing.CalculateCollateralRequest.calculation:type_name -> bfi.bravoservice.agentmarketing.CalculationInfoRequest
	1,  // 1: bfi.bravoservice.agentmarketing.CalculateCollateralRequest.collateral:type_name -> bfi.bravoservice.agentmarketing.CollateralInfoRequest
	4,  // 2: bfi.bravoservice.agentmarketing.CalculateInstallmentRequest.calculation:type_name -> bfi.bravoservice.agentmarketing.InstallmentCalculationInfoRequest
	5,  // 3: bfi.bravoservice.agentmarketing.CalculateInstallmentRequest.collateral:type_name -> bfi.bravoservice.agentmarketing.InstallmentCollateralInfoRequest
	7,  // 4: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem.provision:type_name -> bfi.bravoservice.agentmarketing.InstallmentProvisionInfo
	8,  // 5: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem.asset_insurance:type_name -> bfi.bravoservice.agentmarketing.InstallmentAssetInsuranceInfo
	9,  // 6: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem.life_insurance:type_name -> bfi.bravoservice.agentmarketing.InstallmentLifeInsuranceInfo
	10, // 7: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem.rsa_insurance:type_name -> bfi.bravoservice.agentmarketing.InstallmentRsaInsuranceInfo
	11, // 8: bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem.santunan_insurance:type_name -> bfi.bravoservice.agentmarketing.InstallmentSantunanInsuranceInfo
	12, // 9: bfi.bravoservice.agentmarketing.CalculateInstallmentResponse.data:type_name -> bfi.bravoservice.agentmarketing.CalculateInstallmentResponseItem
	2,  // 10: bfi.bravoservice.agentmarketing.CalculationService.CalculateCollateral:input_type -> bfi.bravoservice.agentmarketing.CalculateCollateralRequest
	6,  // 11: bfi.bravoservice.agentmarketing.CalculationService.CalculateInstallment:input_type -> bfi.bravoservice.agentmarketing.CalculateInstallmentRequest
	3,  // 12: bfi.bravoservice.agentmarketing.CalculationService.CalculateCollateral:output_type -> bfi.bravoservice.agentmarketing.CalculateCollateralResponse
	13, // 13: bfi.bravoservice.agentmarketing.CalculationService.CalculateInstallment:output_type -> bfi.bravoservice.agentmarketing.CalculateInstallmentResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_spbe_service_agentmarketing_calculation_proto_init() }
func file_spbe_service_agentmarketing_calculation_proto_init() {
	if File_spbe_service_agentmarketing_calculation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculationInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateralInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCollateralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCollateralResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentCalculationInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentCollateralInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateInstallmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentProvisionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentAssetInsuranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentLifeInsuranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentRsaInsuranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentSantunanInsuranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateInstallmentResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_agentmarketing_calculation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateInstallmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spbe_service_agentmarketing_calculation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spbe_service_agentmarketing_calculation_proto_goTypes,
		DependencyIndexes: file_spbe_service_agentmarketing_calculation_proto_depIdxs,
		MessageInfos:      file_spbe_service_agentmarketing_calculation_proto_msgTypes,
	}.Build()
	File_spbe_service_agentmarketing_calculation_proto = out.File
	file_spbe_service_agentmarketing_calculation_proto_rawDesc = nil
	file_spbe_service_agentmarketing_calculation_proto_goTypes = nil
	file_spbe_service_agentmarketing_calculation_proto_depIdxs = nil
}
