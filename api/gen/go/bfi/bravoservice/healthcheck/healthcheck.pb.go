// Healthcheck is common service for service healthcheck RPC access.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: spbe/service/healthcheck/healthcheck.proto

package healthcheck

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Valid state for health check request.
type HealthcheckRequest_Check int32

const (
	// liveness is state whether the service is already up.
	HealthcheckRequest_liveness HealthcheckRequest_Check = 0
	// readiness is state whether the service is already up AND all ready to serve the user request.
	HealthcheckRequest_readiness HealthcheckRequest_Check = 1
)

// Enum value maps for HealthcheckRequest_Check.
var (
	HealthcheckRequest_Check_name = map[int32]string{
		0: "liveness",
		1: "readiness",
	}
	HealthcheckRequest_Check_value = map[string]int32{
		"liveness":  0,
		"readiness": 1,
	}
)

func (x HealthcheckRequest_Check) Enum() *HealthcheckRequest_Check {
	p := new(HealthcheckRequest_Check)
	*p = x
	return p
}

func (x HealthcheckRequest_Check) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthcheckRequest_Check) Descriptor() protoreflect.EnumDescriptor {
	return file_spbe_service_healthcheck_healthcheck_proto_enumTypes[0].Descriptor()
}

func (HealthcheckRequest_Check) Type() protoreflect.EnumType {
	return &file_spbe_service_healthcheck_healthcheck_proto_enumTypes[0]
}

func (x HealthcheckRequest_Check) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthcheckRequest_Check.Descriptor instead.
func (HealthcheckRequest_Check) EnumDescriptor() ([]byte, []int) {
	return file_spbe_service_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0, 0}
}

// Healthcheck request definition.
type HealthcheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be string: `liveness`|`readiness` OR, integer: `0`|`1`.
	State HealthcheckRequest_Check `protobuf:"varint,1,opt,name=state,proto3,enum=bfi.bravoservice.healthcheck.HealthcheckRequest_Check" json:"state,omitempty"`
}

func (x *HealthcheckRequest) Reset() {
	*x = HealthcheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_healthcheck_healthcheck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcheckRequest) ProtoMessage() {}

func (x *HealthcheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_healthcheck_healthcheck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcheckRequest.ProtoReflect.Descriptor instead.
func (*HealthcheckRequest) Descriptor() ([]byte, []int) {
	return file_spbe_service_healthcheck_healthcheck_proto_rawDescGZIP(), []int{0}
}

func (x *HealthcheckRequest) GetState() HealthcheckRequest_Check {
	if x != nil {
		return x.State
	}
	return HealthcheckRequest_liveness
}

// Response of HealthcheckRequest
type HealthcheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contain value of the state. e.g. "OK" or "UP"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HealthcheckResponse) Reset() {
	*x = HealthcheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spbe_service_healthcheck_healthcheck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcheckResponse) ProtoMessage() {}

func (x *HealthcheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spbe_service_healthcheck_healthcheck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcheckResponse.ProtoReflect.Descriptor instead.
func (*HealthcheckResponse) Descriptor() ([]byte, []int) {
	return file_spbe_service_healthcheck_healthcheck_proto_rawDescGZIP(), []int{1}
}

func (x *HealthcheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_spbe_service_healthcheck_healthcheck_proto protoreflect.FileDescriptor

var file_spbe_service_healthcheck_healthcheck_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x70, 0x62, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x62, 0x66,
	0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62,
	0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x24, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xc3, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x30, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x7d, 0xba, 0x47, 0x16, 0x2a, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x88, 0x01, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x66, 0x69, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x01, 0x50,
	0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x66,
	0x69, 0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x66, 0x69, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x66,
	0x69, 0x2f, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3b, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spbe_service_healthcheck_healthcheck_proto_rawDescOnce sync.Once
	file_spbe_service_healthcheck_healthcheck_proto_rawDescData = file_spbe_service_healthcheck_healthcheck_proto_rawDesc
)

func file_spbe_service_healthcheck_healthcheck_proto_rawDescGZIP() []byte {
	file_spbe_service_healthcheck_healthcheck_proto_rawDescOnce.Do(func() {
		file_spbe_service_healthcheck_healthcheck_proto_rawDescData = protoimpl.X.CompressGZIP(file_spbe_service_healthcheck_healthcheck_proto_rawDescData)
	})
	return file_spbe_service_healthcheck_healthcheck_proto_rawDescData
}

var file_spbe_service_healthcheck_healthcheck_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spbe_service_healthcheck_healthcheck_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spbe_service_healthcheck_healthcheck_proto_goTypes = []interface{}{
	(HealthcheckRequest_Check)(0), // 0: bfi.bravoservice.healthcheck.HealthcheckRequest.Check
	(*HealthcheckRequest)(nil),    // 1: bfi.bravoservice.healthcheck.HealthcheckRequest
	(*HealthcheckResponse)(nil),   // 2: bfi.bravoservice.healthcheck.HealthcheckResponse
}
var file_spbe_service_healthcheck_healthcheck_proto_depIdxs = []int32{
	0, // 0: bfi.bravoservice.healthcheck.HealthcheckRequest.state:type_name -> bfi.bravoservice.healthcheck.HealthcheckRequest.Check
	1, // 1: bfi.bravoservice.healthcheck.HealthcheckService.GetHealthcheck:input_type -> bfi.bravoservice.healthcheck.HealthcheckRequest
	2, // 2: bfi.bravoservice.healthcheck.HealthcheckService.GetHealthcheck:output_type -> bfi.bravoservice.healthcheck.HealthcheckResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spbe_service_healthcheck_healthcheck_proto_init() }
func file_spbe_service_healthcheck_healthcheck_proto_init() {
	if File_spbe_service_healthcheck_healthcheck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spbe_service_healthcheck_healthcheck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spbe_service_healthcheck_healthcheck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spbe_service_healthcheck_healthcheck_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spbe_service_healthcheck_healthcheck_proto_goTypes,
		DependencyIndexes: file_spbe_service_healthcheck_healthcheck_proto_depIdxs,
		EnumInfos:         file_spbe_service_healthcheck_healthcheck_proto_enumTypes,
		MessageInfos:      file_spbe_service_healthcheck_healthcheck_proto_msgTypes,
	}.Build()
	File_spbe_service_healthcheck_healthcheck_proto = out.File
	file_spbe_service_healthcheck_healthcheck_proto_rawDesc = nil
	file_spbe_service_healthcheck_healthcheck_proto_goTypes = nil
	file_spbe_service_healthcheck_healthcheck_proto_depIdxs = nil
}
